{"version":3,"sources":["components/navbar.jsx","services/httpServices.js","services/searchService.js","components/search.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","placeholder","aria-label","axios","interceptors","response","use","error","status","console","log","toast","Promise","reject","get","post","put","delete","config","apiEndpoint","search","Search","state","disease","this","setState","Component","App","Fragment","path","component","from","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WA4BeA,G,YAzBA,WACb,OACE,8BACE,yBAAKC,UAAU,kEACb,uBAAGA,UAAU,sCAAsCC,KAAK,KAAxD,UAGA,2BACED,UAAU,uCACVE,KAAK,OACLC,YAAY,SACZC,aAAW,WAEb,wBAAIJ,UAAU,mBACZ,wBAAIA,UAAU,wBACZ,uBAAGA,UAAU,WAAWC,KAAK,SAA7B,gB,yFCfZI,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAAAC,GASpC,OAPEA,EAAMF,UACNE,EAAMF,SAASG,QAAU,KACzBD,EAAMF,SAASG,OAAS,MAExBC,QAAQC,IAAI,oBAAqBH,GACjCI,IAAMJ,MAAM,gCAEPK,QAAQC,OAAON,MAQjBJ,IAAMW,IACLX,IAAMY,KACPZ,IAAMa,IACHb,IAAMc,OCpBIC,EAAOC,YAAYC,OAMxB,ICOAC,E,2MAXbC,MAAQ,CAAEC,QAAS,I,mNAGKpB,IAAMW,IAAI,4C,OAA1BS,E,OACNC,KAAKC,SAASF,G,qIAGd,OAAO,2BAAIC,KAAKF,MAAMC,QAAf,S,GARUG,aCsBNC,MAlBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,MACA,0BAAM9B,UAAU,QACd,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO+B,KAAK,QAAQC,UAAWT,IAC/B,kBAAC,IAAD,CAAUU,KAAK,IAAIC,OAAK,EAACC,GAAG,eCNpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b3907db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <body>\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">\r\n          lib.io\r\n        </a>\r\n        <input\r\n          className=\"form-control form-control-dark w-100\"\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n        />\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap\">\r\n            <a className=\"nav-link\" href=\"/home\">\r\n              Search\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </body>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n  if (!expectedError) {\r\n    console.log(\"Logging the error\", error);\r\n    toast.error(\"An unexpected error occured\");\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nfunction setJwt(jwt) {\r\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n}\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  setJwt\r\n};\r\n","import config from \"../config.json\";\r\nimport http from \"./httpServices\";\r\n// import jwtDecode from \"jwt-decode\";\r\nconst apiEndpoint = config.apiEndpoint.search;\r\n\r\nexport async function search(searchedItem) {\r\n  return await http.get(\"http://libsoft.io/api/codes/search?q=\" + searchedItem);\r\n}\r\n\r\nexport default {\r\n  search\r\n};\r\n","import React, { Component } from \"react\";\r\nimport searchService from \"../services/searchService\";\r\nimport axios from \"axios\";\r\n\r\nclass Search extends Component {\r\n  state = { disease: \"\" };\r\n\r\n  async componentDidMount() {\r\n    const disease = await axios.get(\"http://libsoft.io/api/codes/search?q=hiv\"); //searchService.search(\"hiv\");\r\n    this.setState(disease);\r\n  }\r\n  render() {\r\n    return <p>{this.state.disease} </p>;\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Search from \"./components/search\";\r\nimport searchService from \"./services/searchService\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <ToastContainer />\r\n      <main className=\"Main\">\r\n        <NavBar />\r\n        <BrowserRouter>\r\n          <Switch>\r\n            {/* <Route path=\"/search\" component={console.log(\"In Progress\")} /> */}\r\n            <Route path=\"/home\" component={Search} />\r\n            <Redirect from=\"/\" exact to=\"/home\" />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}